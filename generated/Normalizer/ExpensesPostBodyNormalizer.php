<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace JoliCode\Harvest\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ExpensesPostBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'JoliCode\\Harvest\\Api\\Model\\ExpensesPostBody';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \JoliCode\Harvest\Api\Model\ExpensesPostBody;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \JoliCode\Harvest\Api\Model\ExpensesPostBody();
        if (property_exists($data, 'user_id')) {
            $object->setUserId($data->{'user_id'});
        }
        if (property_exists($data, 'project_id')) {
            $object->setProjectId($data->{'project_id'});
        }
        if (property_exists($data, 'expense_category_id')) {
            $object->setExpenseCategoryId($data->{'expense_category_id'});
        }
        if (property_exists($data, 'spent_date')) {
            $object->setSpentDate($data->{'spent_date'});
        }
        if (property_exists($data, 'units')) {
            $object->setUnits($data->{'units'});
        }
        if (property_exists($data, 'total_cost')) {
            $object->setTotalCost($data->{'total_cost'});
        }
        if (property_exists($data, 'notes')) {
            $object->setNotes($data->{'notes'});
        }
        if (property_exists($data, 'billable')) {
            $object->setBillable($data->{'billable'});
        }
        if (property_exists($data, 'receipt')) {
            $object->setReceipt($data->{'receipt'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getUserId()) {
            $data->{'user_id'} = $object->getUserId();
        }
        if (null !== $object->getProjectId()) {
            $data->{'project_id'} = $object->getProjectId();
        }
        if (null !== $object->getExpenseCategoryId()) {
            $data->{'expense_category_id'} = $object->getExpenseCategoryId();
        }
        if (null !== $object->getSpentDate()) {
            $data->{'spent_date'} = $object->getSpentDate();
        }
        if (null !== $object->getUnits()) {
            $data->{'units'} = $object->getUnits();
        }
        if (null !== $object->getTotalCost()) {
            $data->{'total_cost'} = $object->getTotalCost();
        }
        if (null !== $object->getNotes()) {
            $data->{'notes'} = $object->getNotes();
        }
        if (null !== $object->getBillable()) {
            $data->{'billable'} = $object->getBillable();
        }
        if (null !== $object->getReceipt()) {
            $data->{'receipt'} = $object->getReceipt();
        }

        return $data;
    }
}
