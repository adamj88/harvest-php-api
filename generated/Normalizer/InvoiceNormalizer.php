<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace JoliCode\Harvest\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class InvoiceNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'JoliCode\\Harvest\\Api\\Model\\Invoice';
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof \JoliCode\Harvest\Api\Model\Invoice;
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \JoliCode\Harvest\Api\Model\Invoice();
        if (property_exists($data, 'id')) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'client')) {
            $object->setClient($this->denormalizer->denormalize($data->{'client'}, 'JoliCode\\Harvest\\Api\\Model\\InvoiceClient', 'json', $context));
        }
        if (property_exists($data, 'line_items')) {
            $values = [];
            foreach ($data->{'line_items'} as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'JoliCode\\Harvest\\Api\\Model\\InvoiceLineItem', 'json', $context);
            }
            $object->setLineItems($values);
        }
        if (property_exists($data, 'estimate')) {
            $object->setEstimate($this->denormalizer->denormalize($data->{'estimate'}, 'JoliCode\\Harvest\\Api\\Model\\InvoiceEstimate', 'json', $context));
        }
        if (property_exists($data, 'retainer')) {
            $object->setRetainer($this->denormalizer->denormalize($data->{'retainer'}, 'JoliCode\\Harvest\\Api\\Model\\InvoiceRetainer', 'json', $context));
        }
        if (property_exists($data, 'creator')) {
            $object->setCreator($this->denormalizer->denormalize($data->{'creator'}, 'JoliCode\\Harvest\\Api\\Model\\InvoiceCreator', 'json', $context));
        }
        if (property_exists($data, 'client_key')) {
            $object->setClientKey($data->{'client_key'});
        }
        if (property_exists($data, 'number')) {
            $object->setNumber($data->{'number'});
        }
        if (property_exists($data, 'purchase_order')) {
            $object->setPurchaseOrder($data->{'purchase_order'});
        }
        if (property_exists($data, 'amount')) {
            $object->setAmount($data->{'amount'});
        }
        if (property_exists($data, 'due_amount')) {
            $object->setDueAmount($data->{'due_amount'});
        }
        if (property_exists($data, 'tax')) {
            $object->setTax($data->{'tax'});
        }
        if (property_exists($data, 'tax_amount')) {
            $object->setTaxAmount($data->{'tax_amount'});
        }
        if (property_exists($data, 'tax2')) {
            $object->setTax2($data->{'tax2'});
        }
        if (property_exists($data, 'tax2_amount')) {
            $object->setTax2Amount($data->{'tax2_amount'});
        }
        if (property_exists($data, 'discount')) {
            $object->setDiscount($data->{'discount'});
        }
        if (property_exists($data, 'discount_amount')) {
            $object->setDiscountAmount($data->{'discount_amount'});
        }
        if (property_exists($data, 'subject')) {
            $object->setSubject($data->{'subject'});
        }
        if (property_exists($data, 'notes')) {
            $object->setNotes($data->{'notes'});
        }
        if (property_exists($data, 'currency')) {
            $object->setCurrency($data->{'currency'});
        }
        if (property_exists($data, 'state')) {
            $object->setState($data->{'state'});
        }
        if (property_exists($data, 'period_start')) {
            $object->setPeriodStart($data->{'period_start'});
        }
        if (property_exists($data, 'period_end')) {
            $object->setPeriodEnd($data->{'period_end'});
        }
        if (property_exists($data, 'issue_date')) {
            $object->setIssueDate($data->{'issue_date'});
        }
        if (property_exists($data, 'due_date')) {
            $object->setDueDate($data->{'due_date'});
        }
        if (property_exists($data, 'payment_term')) {
            $object->setPaymentTerm($data->{'payment_term'});
        }
        if (property_exists($data, 'sent_at')) {
            $object->setSentAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'sent_at'}));
        }
        if (property_exists($data, 'paid_at')) {
            $object->setPaidAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'paid_at'}));
        }
        if (property_exists($data, 'paid_date')) {
            $object->setPaidDate($data->{'paid_date'});
        }
        if (property_exists($data, 'closed_at')) {
            $object->setClosedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'closed_at'}));
        }
        if (property_exists($data, 'created_at')) {
            $object->setCreatedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'created_at'}));
        }
        if (property_exists($data, 'updated_at')) {
            $object->setUpdatedAt(\DateTime::createFromFormat("Y-m-d\TH:i:sP", $data->{'updated_at'}));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getClient()) {
            $data->{'client'} = $this->normalizer->normalize($object->getClient(), 'json', $context);
        }
        if (null !== $object->getLineItems()) {
            $values = [];
            foreach ($object->getLineItems() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'line_items'} = $values;
        }
        if (null !== $object->getEstimate()) {
            $data->{'estimate'} = $this->normalizer->normalize($object->getEstimate(), 'json', $context);
        }
        if (null !== $object->getRetainer()) {
            $data->{'retainer'} = $this->normalizer->normalize($object->getRetainer(), 'json', $context);
        }
        if (null !== $object->getCreator()) {
            $data->{'creator'} = $this->normalizer->normalize($object->getCreator(), 'json', $context);
        }
        if (null !== $object->getClientKey()) {
            $data->{'client_key'} = $object->getClientKey();
        }
        if (null !== $object->getNumber()) {
            $data->{'number'} = $object->getNumber();
        }
        if (null !== $object->getPurchaseOrder()) {
            $data->{'purchase_order'} = $object->getPurchaseOrder();
        }
        if (null !== $object->getAmount()) {
            $data->{'amount'} = $object->getAmount();
        }
        if (null !== $object->getDueAmount()) {
            $data->{'due_amount'} = $object->getDueAmount();
        }
        if (null !== $object->getTax()) {
            $data->{'tax'} = $object->getTax();
        }
        if (null !== $object->getTaxAmount()) {
            $data->{'tax_amount'} = $object->getTaxAmount();
        }
        if (null !== $object->getTax2()) {
            $data->{'tax2'} = $object->getTax2();
        }
        if (null !== $object->getTax2Amount()) {
            $data->{'tax2_amount'} = $object->getTax2Amount();
        }
        if (null !== $object->getDiscount()) {
            $data->{'discount'} = $object->getDiscount();
        }
        if (null !== $object->getDiscountAmount()) {
            $data->{'discount_amount'} = $object->getDiscountAmount();
        }
        if (null !== $object->getSubject()) {
            $data->{'subject'} = $object->getSubject();
        }
        if (null !== $object->getNotes()) {
            $data->{'notes'} = $object->getNotes();
        }
        if (null !== $object->getCurrency()) {
            $data->{'currency'} = $object->getCurrency();
        }
        if (null !== $object->getState()) {
            $data->{'state'} = $object->getState();
        }
        if (null !== $object->getPeriodStart()) {
            $data->{'period_start'} = $object->getPeriodStart();
        }
        if (null !== $object->getPeriodEnd()) {
            $data->{'period_end'} = $object->getPeriodEnd();
        }
        if (null !== $object->getIssueDate()) {
            $data->{'issue_date'} = $object->getIssueDate();
        }
        if (null !== $object->getDueDate()) {
            $data->{'due_date'} = $object->getDueDate();
        }
        if (null !== $object->getPaymentTerm()) {
            $data->{'payment_term'} = $object->getPaymentTerm();
        }
        if (null !== $object->getSentAt()) {
            $data->{'sent_at'} = $object->getSentAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getPaidAt()) {
            $data->{'paid_at'} = $object->getPaidAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getPaidDate()) {
            $data->{'paid_date'} = $object->getPaidDate();
        }
        if (null !== $object->getClosedAt()) {
            $data->{'closed_at'} = $object->getClosedAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getCreatedAt()) {
            $data->{'created_at'} = $object->getCreatedAt()->format("Y-m-d\TH:i:sP");
        }
        if (null !== $object->getUpdatedAt()) {
            $data->{'updated_at'} = $object->getUpdatedAt()->format("Y-m-d\TH:i:sP");
        }

        return $data;
    }
}
