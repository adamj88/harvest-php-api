<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace JoliCode\Harvest\Api\Endpoint;

class PatchTimeEntryByTimeEntryId extends \Jane\OpenApiRuntime\Client\BaseEndpoint implements \Jane\OpenApiRuntime\Client\Psr7HttplugEndpoint
{
    protected $TimeEntryId;

    /**
     * Updates the specific time entry by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a time entry object and a 200 OK response code if the call succeeded.
     *
     * @param string $timeEntryId
     * @param array  $queryParameters {
     *
     *     @var string $project_id the ID of the project to associate with the time entry
     *     @var string $task_id the ID of the task to associate with the time entry
     *     @var string $spent_date the ISO 8601 formatted date the time entry was spent
     *     @var string $started_time The time the entry started. Defaults to the current time. Example: “8:00am”.
     *     @var string $ended_time the time the entry ended
     *     @var string $hours the current amount of time tracked
     *     @var string $notes any notes to be associated with the time entry
     *     @var string $external_reference An object containing the id, group_id, and permalink of the external reference.
     * }
     */
    public function __construct(string $timeEntryId, array $queryParameters = [])
    {
        $this->timeEntryId = $timeEntryId;
        $this->queryParameters = $queryParameters;
    }

    use \Jane\OpenApiRuntime\Client\Psr7HttplugEndpointTrait;

    public function getMethod(): string
    {
        return 'PATCH';
    }

    public function getUri(): string
    {
        return str_replace(['{TimeEntryId}'], [$this->TimeEntryId], '/time_entries/{TimeEntryId}');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, \Http\Message\StreamFactory $streamFactory = null): array
    {
        return [[], null];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['project_id', 'task_id', 'spent_date', 'started_time', 'ended_time', 'hours', 'notes', 'external_reference']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->setAllowedTypes('project_id', ['string']);
        $optionsResolver->setAllowedTypes('task_id', ['string']);
        $optionsResolver->setAllowedTypes('spent_date', ['string']);
        $optionsResolver->setAllowedTypes('started_time', ['string']);
        $optionsResolver->setAllowedTypes('ended_time', ['string']);
        $optionsResolver->setAllowedTypes('hours', ['string']);
        $optionsResolver->setAllowedTypes('notes', ['string']);
        $optionsResolver->setAllowedTypes('external_reference', ['string']);

        return $optionsResolver;
    }

    /**
     * {@inheritdoc}
     *
     *
     * @return null|\JoliCode\Harvest\Api\Model\TimeEntry|\JoliCode\Harvest\Api\Model\Error
     */
    protected function transformResponseBody(string $body, int $status, \Symfony\Component\Serializer\SerializerInterface $serializer)
    {
        if (200 === $status) {
            return $serializer->deserialize($body, 'JoliCode\\Harvest\\Api\\Model\\TimeEntry', 'json');
        }

        return $serializer->deserialize($body, 'JoliCode\\Harvest\\Api\\Model\\Error', 'json');
    }
}
