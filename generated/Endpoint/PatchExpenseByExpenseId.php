<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace JoliCode\Harvest\Api\Endpoint;

class PatchExpenseByExpenseId extends \Jane\OpenApiRuntime\Client\BaseEndpoint implements \Jane\OpenApiRuntime\Client\Psr7HttplugEndpoint
{
    protected $ExpenseId;

    /**
     * Updates the specific expense by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns an expense object and a 200 OK response code if the call succeeded.
     *
     * @param string $expenseId
     * @param array  $queryParameters {
     *
     *     @var string $project_id the ID of the project associated with this expense
     *     @var string $expense_category_id the ID of the expense category this expense is being tracked against
     *     @var string $spent_date date the expense occurred
     *     @var string $units the quantity of units to use in calculating the total_cost of the expense
     *     @var string $total_cost the total amount of the expense
     *     @var string $notes textual notes used to describe the expense
     *     @var string $billable Whether this expense is billable or not. Defaults to true.
     *     @var string $receipt A receipt file to attach to the expense. If including a receipt, you must submit a multipart/form-data request.
     *     @var string $delete_receipt Whether an attached expense receipt should be deleted. Pass true to delete the expense receipt.
     * }
     */
    public function __construct(string $expenseId, array $queryParameters = [])
    {
        $this->expenseId = $expenseId;
        $this->queryParameters = $queryParameters;
    }

    use \Jane\OpenApiRuntime\Client\Psr7HttplugEndpointTrait;

    public function getMethod(): string
    {
        return 'PATCH';
    }

    public function getUri(): string
    {
        return str_replace(['{ExpenseId}'], [$this->ExpenseId], '/expenses/{ExpenseId}');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, \Http\Message\StreamFactory $streamFactory = null): array
    {
        return [[], null];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['project_id', 'expense_category_id', 'spent_date', 'units', 'total_cost', 'notes', 'billable', 'receipt', 'delete_receipt']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->setAllowedTypes('project_id', ['string']);
        $optionsResolver->setAllowedTypes('expense_category_id', ['string']);
        $optionsResolver->setAllowedTypes('spent_date', ['string']);
        $optionsResolver->setAllowedTypes('units', ['string']);
        $optionsResolver->setAllowedTypes('total_cost', ['string']);
        $optionsResolver->setAllowedTypes('notes', ['string']);
        $optionsResolver->setAllowedTypes('billable', ['string']);
        $optionsResolver->setAllowedTypes('receipt', ['string']);
        $optionsResolver->setAllowedTypes('delete_receipt', ['string']);

        return $optionsResolver;
    }

    /**
     * {@inheritdoc}
     *
     *
     * @return null|\JoliCode\Harvest\Api\Model\Expense|\JoliCode\Harvest\Api\Model\Error
     */
    protected function transformResponseBody(string $body, int $status, \Symfony\Component\Serializer\SerializerInterface $serializer)
    {
        if (200 === $status) {
            return $serializer->deserialize($body, 'JoliCode\\Harvest\\Api\\Model\\Expense', 'json');
        }

        return $serializer->deserialize($body, 'JoliCode\\Harvest\\Api\\Model\\Error', 'json');
    }
}
