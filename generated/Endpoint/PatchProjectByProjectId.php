<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace JoliCode\Harvest\Api\Endpoint;

class PatchProjectByProjectId extends \Jane\OpenApiRuntime\Client\BaseEndpoint implements \Jane\OpenApiRuntime\Client\Psr7HttplugEndpoint
{
    protected $ProjectId;

    /**
     * Updates the specific project by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a project object and a 200 OK response code if the call succeeded.
     *
     * @param string $projectId
     * @param array  $queryParameters {
     *
     *     @var string $client_id the ID of the client to associate this project with
     *     @var string $name the name of the project
     *     @var string $code the code associated with the project
     *     @var string $is_active Whether the project is active or archived. Defaults to true.
     *     @var string $is_billable whether the project is billable or not
     *     @var string $is_fixed_fee whether the project is a fixed-fee project or not
     *     @var string $bill_by The method by which the project is invoiced. Options: Project, Tasks, People, or none.
     *     @var string $hourly_rate rate for projects billed by Project Hourly Rate
     *     @var string $budget the budget in hours for the project when budgeting by time
     *     @var string $budget_by The method by which the project is budgeted. Options: project (Hours Per Project), project_cost (Total Project Fees), task (Hours Per Task), task_fees (Fees Per Task), person (Hours Per Person), none (No Budget).
     *     @var string $budget_is_monthly Option to have the budget reset every month. Defaults to false.
     *     @var string $notify_when_over_budget Whether project managers should be notified when the project goes over budget. Defaults to false.
     *     @var string $over_budget_notification_percentage Percentage value used to trigger over budget email alerts. Example: use 10.0 for 10.0%.
     *     @var string $show_budget_to_all Option to show project budget to all employees. Does not apply to Total Project Fee projects. Defaults to false.
     *     @var string $cost_budget the monetary budget for the project when budgeting by money
     *     @var string $cost_budget_include_expenses Option for budget of Total Project Fees projects to include tracked expenses. Defaults to false.
     *     @var string $fee The amount you plan to invoice for the project. Only used by fixed-fee projects.
     *     @var string $notes project notes
     *     @var string $starts_on date the project was started
     *     @var string $ends_on Date the project will end.
     * }
     */
    public function __construct(string $projectId, array $queryParameters = [])
    {
        $this->projectId = $projectId;
        $this->queryParameters = $queryParameters;
    }

    use \Jane\OpenApiRuntime\Client\Psr7HttplugEndpointTrait;

    public function getMethod(): string
    {
        return 'PATCH';
    }

    public function getUri(): string
    {
        return str_replace(['{ProjectId}'], [$this->ProjectId], '/projects/{ProjectId}');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, \Http\Message\StreamFactory $streamFactory = null): array
    {
        return [[], null];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['client_id', 'name', 'code', 'is_active', 'is_billable', 'is_fixed_fee', 'bill_by', 'hourly_rate', 'budget', 'budget_by', 'budget_is_monthly', 'notify_when_over_budget', 'over_budget_notification_percentage', 'show_budget_to_all', 'cost_budget', 'cost_budget_include_expenses', 'fee', 'notes', 'starts_on', 'ends_on']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->setAllowedTypes('client_id', ['string']);
        $optionsResolver->setAllowedTypes('name', ['string']);
        $optionsResolver->setAllowedTypes('code', ['string']);
        $optionsResolver->setAllowedTypes('is_active', ['string']);
        $optionsResolver->setAllowedTypes('is_billable', ['string']);
        $optionsResolver->setAllowedTypes('is_fixed_fee', ['string']);
        $optionsResolver->setAllowedTypes('bill_by', ['string']);
        $optionsResolver->setAllowedTypes('hourly_rate', ['string']);
        $optionsResolver->setAllowedTypes('budget', ['string']);
        $optionsResolver->setAllowedTypes('budget_by', ['string']);
        $optionsResolver->setAllowedTypes('budget_is_monthly', ['string']);
        $optionsResolver->setAllowedTypes('notify_when_over_budget', ['string']);
        $optionsResolver->setAllowedTypes('over_budget_notification_percentage', ['string']);
        $optionsResolver->setAllowedTypes('show_budget_to_all', ['string']);
        $optionsResolver->setAllowedTypes('cost_budget', ['string']);
        $optionsResolver->setAllowedTypes('cost_budget_include_expenses', ['string']);
        $optionsResolver->setAllowedTypes('fee', ['string']);
        $optionsResolver->setAllowedTypes('notes', ['string']);
        $optionsResolver->setAllowedTypes('starts_on', ['string']);
        $optionsResolver->setAllowedTypes('ends_on', ['string']);

        return $optionsResolver;
    }

    /**
     * {@inheritdoc}
     *
     *
     * @return null|\JoliCode\Harvest\Api\Model\Project|\JoliCode\Harvest\Api\Model\Error
     */
    protected function transformResponseBody(string $body, int $status, \Symfony\Component\Serializer\SerializerInterface $serializer)
    {
        if (200 === $status) {
            return $serializer->deserialize($body, 'JoliCode\\Harvest\\Api\\Model\\Project', 'json');
        }

        return $serializer->deserialize($body, 'JoliCode\\Harvest\\Api\\Model\\Error', 'json');
    }
}
